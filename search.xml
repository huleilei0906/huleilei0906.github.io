<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ArrayList扩容机制</title>
    <url>/2020/05/26/ArrayList%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><blockquote>
<p>面试的时候问到过ArrayList的扩容机制以及HashMap的扩容机制，今天来讲讲ArrayList的扩容机制。</p>
</blockquote>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><blockquote>
<p>JDK1.8</p>
</blockquote>
<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><p>1.ArrayList若未指定长度默认空间长度为10，可见ArrayList中<strong>“DEFAULT_CAPACITY”</strong>属性，<strong>“size”</strong>属性为元素个数。最大长度为2^31-1-8，见ArrayList中<strong>“MAX_ARRAY_SIZE”</strong>属性。</p>
<p>2.触发扩容的对外方法都在ArrayList.add<em>()的几个方法中，发现长度大于空间长度时调用*</em>“grow()”**,源码如下；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                     size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>3.扩容主要操作是在代码就在grow()方法中，源码及解析如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">   	<span class="comment">// oldCapacity为旧容量，newCapacity为新容量</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="comment">// 将oldCapacity 右移一位，其效果相当于oldCapacity /2，</span></span><br><span class="line">    <span class="comment">// 我们知道位运算的速度远远快于整除运算，整句运算式的结果就是将新容量更新为旧容量的1.5倍，</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 检查新计算出的容量数值和实际所需容量数值比较，若计算出的容量数值小于实际所需容量数值，则用实际容量的数值</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="comment">// 检查新计算出的容量数值是否超过ArrayList最大长度，如果minCapacity大于最大容量，新容量为`Integer.MAX_VALUE`，否则，新容量大小则为 MAX_ARRAY_SIZE 即为 `Integer.MAX_VALUE - 8`</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// 调用copy方法</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        <span class="comment">// MAX_ARRAY_SIZE = Integer.MAX_VALUE-8</span></span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote>
<p>ArrayList扩容机制如下：</p>
<p>1.普遍情况下，新容量是旧容量1.5倍，同时校验新容量是否超过 MAX_ARRAY_SIZE（Integer.MAX_VALUE - 8）。</p>
<p>2.当在扩容1.5倍后，校验新容量是否超过MAX_ARRAY_SIZE（Integer.MAX_VALUE - 8），若新容量（源码中newCapacity）大于最大容量 MAX_ARRAY_SIZE（Integer.MAX_VALUE - 8）时,新容量为Integer.MAX_VALUE，否则为 MAX_ARRAY_SIZE（Integer.MAX_VALUE - 8）;</p>
</blockquote>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Collection</tag>
        <tag>ArrayList</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Hello World</title>
    <url>/2020/05/25/Hexo-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<a id="more"></a>

<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>Quartz的使用</title>
    <url>/2020/06/28/Quartz%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望指出。</p>
<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>Quartz（Job Scheduler），一个比较流行的定时任务框架。搜索引擎会有详细的介绍，此处不再赘述。</p>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><p>JDK：1.8</p>
<p>IDE：IDEA</p>
<p>maven依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><p>Quartz的上手难度其实挺低的，它会给我们提供很多简单的定时任务方法。同时也是可以使用cron表达式设定任务执行时间，接下来的例子就是使用cron表达式进行任务的创建。cron的用法会在后续blog中讲解。</p>
<h4 id="1-创建对外开放的类"><a href="#1-创建对外开放的类" class="headerlink" title="1. 创建对外开放的类"></a>1. 创建对外开放的类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.windh.quartz.job.JobRunnable;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.*;</span><br><span class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadPoolExecutor;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scheduler SCHEDULER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Runnable&gt; JOB_KEY_MAP = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor THREAD_POOL;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">QuartzUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// quartz scheduler</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SCHEDULER = StdSchedulerFactory.getDefaultScheduler();</span><br><span class="line">            <span class="comment">// 及时启动</span></span><br><span class="line">            SCHEDULER.start();</span><br><span class="line">            <span class="comment">// startDelayed(1) 为延时启动，参数为int类型，单位 秒</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            log.error(<span class="string">"Create Default StdScheduler error."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// threadpool</span></span><br><span class="line">        THREAD_POOL = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">8</span>, <span class="number">64</span>, <span class="number">0</span>, TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue(<span class="number">64</span>), <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数表示  当前正在执行的所有任务执行完才会结束scheduler</span></span><br><span class="line">        <span class="keyword">if</span> (SCHEDULER != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                SCHEDULER.shutdown(<span class="keyword">true</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                log.error(<span class="string">"Shutdown Scheduler error."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (THREAD_POOL != <span class="keyword">null</span> &amp;&amp; !THREAD_POOL.isShutdown()) &#123;</span><br><span class="line">            THREAD_POOL.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(String cron, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (runnable != <span class="keyword">null</span> &amp;&amp; CronExpression.isValidExpression(cron)) &#123;</span><br><span class="line">            CronExpression cronExpression;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cronExpression = <span class="keyword">new</span> CronExpression(cron);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                log.error(<span class="string">"parse cron error,add Task error."</span>, e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            addTask(cronExpression, runnable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.error(<span class="string">"param invalid, addTask error."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addTask</span><span class="params">(CronExpression cron, Runnable runnable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (runnable == <span class="keyword">null</span> || cron == <span class="keyword">null</span> || !CronExpression.isValidExpression(cron.getCronExpression())) &#123;</span><br><span class="line">            log.error(<span class="string">"param invalid, addTask error."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        JobDetail job = JobBuilder.newJob(JobRunnable<span class="class">.<span class="keyword">class</span>).<span class="title">withIdentity</span>(<span class="title">uuid</span>).<span class="title">build</span>()</span>;</span><br><span class="line"></span><br><span class="line">        Trigger trigger = TriggerBuilder.newTrigger()</span><br><span class="line">                .startNow()</span><br><span class="line">                .withIdentity(uuid)</span><br><span class="line">                .withSchedule(CronScheduleBuilder.cronSchedule(cron)).build();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SCHEDULER.scheduleJob(job, trigger);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            log.error(<span class="string">"ScheduledJob error."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        JOB_KEY_MAP.put(uuid, runnable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title">getThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> THREAD_POOL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Runnable&gt; <span class="title">getJobKeyMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JOB_KEY_MAP;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Scheduler <span class="title">getScheduler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SCHEDULER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-创建一个实现org-quartz-Job的类JobRunnable"><a href="#2-创建一个实现org-quartz-Job的类JobRunnable" class="headerlink" title="2. 创建一个实现org.quartz.Job的类JobRunnable"></a>2. 创建一个实现org.quartz.Job的类JobRunnable</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.windh.quartz.common.utils.QuartzUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.quartz.Job;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</span><br><span class="line"><span class="keyword">import</span> org.quartz.JobKey;</span><br><span class="line"><span class="keyword">import</span> org.quartz.SchedulerException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobRunnable</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> </span>&#123;</span><br><span class="line">        JobKey jobKey = context.getJobDetail().getKey();</span><br><span class="line">        <span class="keyword">if</span> (QuartzUtil.getJobKeyMap().containsKey(jobKey.getName())) &#123;</span><br><span class="line">            Runnable runnable = QuartzUtil.getJobKeyMap().get(jobKey.getName());</span><br><span class="line">            QuartzUtil.getThreadPool().execute(runnable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                QuartzUtil.getScheduler().deleteJob(jobKey);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">                log.error(<span class="string">"Job info is not contain ,Delete Job error."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-调用，验证方式为springboot启动后添加scheduled。当然你也可以在springboot入口类的main方法里简单验证下"><a href="#3-调用，验证方式为springboot启动后添加scheduled。当然你也可以在springboot入口类的main方法里简单验证下" class="headerlink" title="3. 调用，验证方式为springboot启动后添加scheduled。当然你也可以在springboot入口类的main方法里简单验证下"></a>3. 调用，验证方式为springboot启动后添加scheduled。当然你也可以在springboot入口类的main方法里简单验证下</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.windh.quartz.common.utils.QuartzUtil;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartWare</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// cron表达式 0/2 * * * * ?  表示每分钟的0秒开始没过2秒执行一次</span></span><br><span class="line">        QuartzUtil.addTask(<span class="string">"0/2 * * * * ?"</span>, () -&gt; log.info(<span class="string">"0/2 * * * * ? scheduled exec."</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-验证日志"><a href="#4-验证日志" class="headerlink" title="4. 验证日志"></a>4. 验证日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO 3816 --- [pool-1-thread-1] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br><span class="line">INFO 3816 --- [pool-1-thread-2] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br><span class="line">INFO 3816 --- [pool-1-thread-3] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br><span class="line">INFO 3816 --- [pool-1-thread-4] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br><span class="line">INFO 3816 --- [pool-1-thread-5] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br><span class="line">INFO 3816 --- [pool-1-thread-6] c.w.q.common.springawares.StartWare      : 0&#x2F;2 * * * * ? scheduled exec.</span><br></pre></td></tr></table></figure>

<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>在使用的过程中其实有很多需要注意的点，比如quartz对job和trigger的name进行的一致的校验。之所以会封装一层，改job为runnable，是为了更方便调用，包括1.8之后能使用lambda后能直接构建匿名内部类，减少不必要的类的创建。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Quartz</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>MinIO</title>
    <url>/2020/06/29/Minio/</url>
    <content><![CDATA[<blockquote>
<p><strong>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望指出。</strong></p>
</blockquote>
<h1 id="一、什么是MinIO"><a href="#一、什么是MinIO" class="headerlink" title="一、什么是MinIO"></a>一、什么是MinIO</h1><h2 id="1-1-MinIO介绍"><a href="#1-1-MinIO介绍" class="headerlink" title="1.1 MinIO介绍"></a>1.1 MinIO介绍</h2><p>​        MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>
<h2 id="1-2-MinIO保护数据策略"><a href="#1-2-MinIO保护数据策略" class="headerlink" title="1.2 MinIO保护数据策略"></a>1.2 MinIO保护数据策略</h2><p>​        Minio使用<strong>纠删码</strong><code>erasure code</code>和校验和<code>checksum</code>来保护数据免受硬件故障和无声数据损坏。 即便您丢失一半数量（N/2）的硬盘，您仍然可以恢复数据。</p>
<h1 id="二、MinIO部署"><a href="#二、MinIO部署" class="headerlink" title="二、MinIO部署"></a>二、MinIO部署</h1><h2 id="2-1-单节点部署"><a href="#2-1-单节点部署" class="headerlink" title="2.1 单节点部署"></a>2.1 单节点部署</h2><h3 id="2-1-1-下载minio"><a href="#2-1-1-下载minio" class="headerlink" title="2.1.1 下载minio"></a>2.1.1 下载minio</h3><p>根据实际操作系统及位数下载相应minio server（注：不是minio client）</p>
<p>进入<a href="https://dl.min.io/server/minio/release/linux-amd64/minio下载" target="_blank" rel="noopener">https://dl.min.io/server/minio/release/linux-amd64/minio下载</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;dl.minio.io&#x2F;server&#x2F;minio&#x2F;release&#x2F;linux-amd64&#x2F;minio</span><br></pre></td></tr></table></figure>

<h3 id="2-1-2-上传到linux下"><a href="#2-1-2-上传到linux下" class="headerlink" title="2.1.2 上传到linux下"></a>2.1.2 上传到linux下</h3><p>在上一步下载的文件目录下添加shell脚本(例如：startMinIO.sh)并运行,命令如下：</p>
<p>MINIO_ACCESS_KEY配置minio登录账户</p>
<p>MINIO_SECRET_KEY配置minio登录密码</p>
<p>dataPath为数据存储路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MINIO_ACCESS_KEY="minio"</span><br><span class="line">export MINIO_SECRET_KEY="123qwe!@#"</span><br><span class="line">nohup ./minio server --address :9000 $&#123;dataPath&#125; &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="2-1-3-进入页面验证"><a href="#2-1-3-进入页面验证" class="headerlink" title="2.1.3 进入页面验证"></a>2.1.3 进入页面验证</h3><p>minio默认端口为9000，可以用–address 参数自定义。</p>
<h2 id="2-2-集群部署"><a href="#2-2-集群部署" class="headerlink" title="2.2 集群部署"></a>2.2 集群部署</h2><p>MINIO集群与常规集群不同的是，MINIO集群中存储的文件并不是在所有节点上各存一份，而是将讲文件拆分成多分，再使用<strong>纠删码技术</strong>保障多节点文件完整。同时请<strong>对比</strong>集群部署和单点部署启动命令。本文档以四个节点为例预留5个端口（8089、9001、9002、9003、9004）</p>
<h3 id="2-2-1-非集群单节点部署"><a href="#2-2-1-非集群单节点部署" class="headerlink" title="2.2.1 非集群单节点部署"></a>2.2.1 非集群单节点部署</h3><p>命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MINIO_ACCESS_KEY="minio"</span><br><span class="line">export MINIO_SECRET_KEY="123qwe!@#"</span><br><span class="line">nohup ./minio server --address :9000 $&#123;dataPath&#125; &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-2-集群下单节点部署"><a href="#2-2-2-集群下单节点部署" class="headerlink" title="2.2.2 集群下单节点部署"></a>2.2.2 集群下单节点部署</h3><p>集群下部署minio单节点需要根据非集群单节点部署命令进行修改。将datapath部分指向集群中所有minio节点的datapath。</p>
<p>集群中其中一个节点部署命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MINIO_ACCESS_KEY="minio"</span><br><span class="line">export MINIO_SECRET_KEY="123qwe!@#"</span><br><span class="line">nohup ./minio server --address $&#123;Node1_IP&#125;:$&#123;Node1_Port&#125;  http://$&#123;Node1_IP&#125;/data/data1 http://$&#123;Node2_IP&#125;/data/data2 http://$&#123;Node3_IP&#125;/data/data3 http://$&#123;Node4_IP&#125;/data/data4 &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-3-MINIO集群注意点"><a href="#2-2-3-MINIO集群注意点" class="headerlink" title="2.2.3 MINIO集群注意点"></a>2.2.3 MINIO集群注意点</h3><p>minio的集群所有节点的<strong>登录账户</strong>及<strong>密码</strong>必须一致。</p>
<p>minio的集群节点数量推荐大于等于<strong>4</strong>。</p>
<h3 id="2-2-4-MINIO负载均衡"><a href="#2-2-4-MINIO负载均衡" class="headerlink" title="2.2.4 MINIO负载均衡"></a>2.2.4 MINIO负载均衡</h3><p>官方文档支持nginx，可参考我的另一篇<a href="/2020/06/28/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/" title="关于nginx负载均衡的Blog">关于nginx负载均衡的Blog</a>。</p>
<h4 id="2-2-4-1-配置nginx分发端口"><a href="#2-2-4-1-配置nginx分发端口" class="headerlink" title="2.2.4.1 配置nginx分发端口"></a>2.2.4.1 配置nginx分发端口</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"> <span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">8089</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  www.dealthBook.com;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-2-添加upstream"><a href="#2-2-4-2-添加upstream" class="headerlink" title="2.2.4.2 添加upstream"></a>2.2.4.2 添加upstream</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> minio_server &#123;</span><br><span class="line">	<span class="comment">#1、轮询（默认选项，所有weight=1）</span></span><br><span class="line">	<span class="comment">#2、weight，执行轮询几率，weight与访问几率成正比</span></span><br><span class="line">	<span class="comment">#3、ip_hash，每个请求按照hash结果分配，这样其实是每个服务都有一个固定的值</span></span><br><span class="line">	<span class="comment">#4、least_conn，最少连接数负载均衡</span></span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP1&#125;</span>:<span class="variable">$&#123;PORT1&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP2&#125;</span>:<span class="variable">$&#123;PORT2&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP3&#125;</span>:<span class="variable">$&#123;PORT3&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP4&#125;</span>:<span class="variable">$&#123;PORT4&#125;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-3-添加minio的upstream名称"><a href="#2-2-4-3-添加minio的upstream名称" class="headerlink" title="2.2.4.3 添加minio的upstream名称"></a>2.2.4.3 添加minio的upstream名称</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /minio &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://minio_server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-4-4-最终配置文件布局"><a href="#2-2-4-4-最终配置文件布局" class="headerlink" title="2.2.4.4 最终配置文件布局"></a>2.2.4.4 最终配置文件布局</h4><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">  	...</span><br><span class="line">    <span class="attribute">upstream</span> minio_server&#123;</span><br><span class="line">		...</span><br><span class="line">    &#125;</span><br><span class="line">    server&#123;</span><br><span class="line">        ...</span><br><span class="line">       	<span class="attribute">location</span> /minio&#123;</span><br><span class="line">            ...</span><br><span class="line">     	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-5-启动nginx及所有节点的minio"><a href="#2-2-5-启动nginx及所有节点的minio" class="headerlink" title="2.2.5 启动nginx及所有节点的minio"></a>2.2.5 启动nginx及所有节点的minio</h3><h3 id="2-2-6-验证"><a href="#2-2-6-验证" class="headerlink" title="2.2.6 验证"></a>2.2.6 验证</h3><h4 id="2-2-6-1-验证各节点minio是否正常"><a href="#2-2-6-1-验证各节点minio是否正常" class="headerlink" title="2.2.6.1 验证各节点minio是否正常"></a>2.2.6.1 验证各节点minio是否正常</h4><blockquote>
<p>进入 <a href="http://ip:port/minio">http://ip:port/minio</a></p>
</blockquote>
<h4 id="2-2-6-2-通过nginx进入minio查看分发是否正常-本文配置nginx的minio端口为8089"><a href="#2-2-6-2-通过nginx进入minio查看分发是否正常-本文配置nginx的minio端口为8089" class="headerlink" title="2.2.6.2 通过nginx进入minio查看分发是否正常,本文配置nginx的minio端口为8089"></a>2.2.6.2 通过nginx进入minio查看分发是否正常,本文配置nginx的minio端口为8089</h4><blockquote>
<p>通过nginx进入minio <a href="http://ip:8089/minio" target="_blank" rel="noopener">http://ip:8089/minio</a></p>
</blockquote>
<h1 id="三、MinIO页面"><a href="#三、MinIO页面" class="headerlink" title="三、MinIO页面"></a>三、MinIO页面</h1><h2 id="3-1-新建桶（Bucket）及上传文件"><a href="#3-1-新建桶（Bucket）及上传文件" class="headerlink" title="3.1 新建桶（Bucket）及上传文件"></a>3.1 新建桶（Bucket）及上传文件</h2><img style="margin:auto 0;" src="/2020/06/29/Minio/MinIO-1.png" alt="MinIO-1.png">]]></content>
      <categories>
        <category>MinIO</category>
      </categories>
      <tags>
        <tag>MinIO</tag>
        <tag>分布式</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>SPI机制</title>
    <url>/2020/07/01/SPI%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<p><strong>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望各位大佬指出。</strong></p>
<h1 id="一、什么是SPI"><a href="#一、什么是SPI" class="headerlink" title="一、什么是SPI"></a>一、什么是SPI</h1><h2 id="1-1-SPI思想"><a href="#1-1-SPI思想" class="headerlink" title="1.1 SPI思想"></a>1.1 SPI思想</h2><p>SPI的全名为Service Provider Interface.这个是针对厂商或者插件的。</p>
<h2 id="1-2-SPI约定"><a href="#1-2-SPI约定" class="headerlink" title="1.2 SPI约定"></a>1.2 SPI约定</h2><h3 id="1-2-1-Java"><a href="#1-2-1-Java" class="headerlink" title="1.2.1 Java"></a>1.2.1 Java</h3><p>当服务的提供者，提供了服务接口的一种实现之后，在jar包的META-INF/services/目录里创建一个以服务接口命名的文件。</p>
<h3 id="1-2-2-Spring"><a href="#1-2-2-Spring" class="headerlink" title="1.2.2 Spring"></a>1.2.2 Spring</h3><p>在jar包的META-INF/目录里创建一个spring.factories，所有spi对应关系都可以写在这个文件中。</p>
<h1 id="二、Spring中的SPI"><a href="#二、Spring中的SPI" class="headerlink" title="二、Spring中的SPI"></a>二、Spring中的SPI</h1><p>本文介绍下spring的SPI</p>
<h2 id="2-1-定义一个接口"><a href="#2-1-定义一个接口" class="headerlink" title="2.1 定义一个接口"></a>2.1 定义一个接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InitServiceInterFace</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> ApplicationContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2-编写一个接口的实现类"><a href="#2-2-编写一个接口的实现类" class="headerlink" title="2.2 编写一个接口的实现类"></a>2.2 编写一个接口的实现类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.windh.springspi.interfaces.InitServiceInterFace;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInit</span> <span class="keyword">implements</span> <span class="title">InitServiceInterFace</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO init LogInit</span></span><br><span class="line">        log.info(<span class="string">"Init My Log."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3-新建spi所需静态文件"><a href="#2-3-新建spi所需静态文件" class="headerlink" title="2.3 新建spi所需静态文件"></a>2.3 新建spi所需静态文件</h2><p>在Resources静态资源目录下新建spring.factories文件；写入如下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">com.windh.springspi.interfaces.InitServiceInterFace</span>=<span class="string">\</span></span><br><span class="line">  <span class="attr">com.windh.springspi.impl.LogInit</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.windh.springspi.interfaces.InitServiceInterFace;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.support.SpringFactoriesLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringspiApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConfigurableApplicationContext run = SpringApplication.run(SpringspiApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">        List&lt;InitServiceInterFace&gt; serviceLoader = SpringFactoriesLoader.loadFactories(</span><br><span class="line">                InitServiceInterFace<span class="class">.<span class="keyword">class</span>, <span class="title">Thread</span>.<span class="title">currentThread</span>().<span class="title">getContextClassLoader</span>())</span>;</span><br><span class="line">        <span class="keyword">for</span> (InitServiceInterFace initServiceInterFace : serviceLoader) &#123;</span><br><span class="line">            initServiceInterFace.init(run);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>日志输入如下：</p>
<img style="margin:auto 0;" src="/2020/07/01/SPI%E6%9C%BA%E5%88%B6/SPI-1.png" alt="SPI-1.png">]]></content>
      <categories>
        <category>SpringBoot</category>
        <category>SPI</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx负载均衡配置</title>
    <url>/2020/06/28/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<blockquote>
<p><strong>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望指出。</strong></p>
</blockquote>
<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>Nginx，高性能的HTTP和反向代理服务器。反向代理作为它的核心功能，它的优点包括隐藏真实服务器、服务聚合等。</p>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><p>Nginx： nginx version: nginx/1.17.6    </p>
<p>Gcc：built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</p>
<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><p>Nginx的安装的总结会放在后续blog更新，此处不做过多的赘述。</p>
<h5 id="step1：准备一个nginx环境"><a href="#step1：准备一个nginx环境" class="headerlink" title="step1：准备一个nginx环境."></a>step1：准备一个nginx环境.</h5><h5 id="step2：找到nginx配置文件路径，编辑nginx-conf"><a href="#step2：找到nginx配置文件路径，编辑nginx-conf" class="headerlink" title="step2：找到nginx配置文件路径，编辑nginx.conf"></a>step2：找到nginx配置文件路径，编辑nginx.conf</h5><h5 id="step3：nginx-conf中的http中添加-upstream，如下"><a href="#step3：nginx-conf中的http中添加-upstream，如下" class="headerlink" title="step3：nginx.conf中的http中添加 upstream，如下"></a>step3：nginx.conf中的http中添加 upstream，如下</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> servername &#123;</span><br><span class="line">    <span class="comment">#1、轮询（默认选项，所有weight=1）</span></span><br><span class="line">    <span class="comment">#2、weight，执行轮询几率，weight与访问几率成正比</span></span><br><span class="line">    <span class="comment">#3、ip_hash，每个请求按照hash结果分配，这样其实是每个服务都有一个固定的值</span></span><br><span class="line">    <span class="comment">#4、least_conn，最少连接数负载均衡</span></span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP1&#125;</span>:<span class="variable">$&#123;PORT1&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP2&#125;</span>:<span class="variable">$&#123;PORT2&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP3&#125;</span>:<span class="variable">$&#123;PORT3&#125;</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="variable">$&#123;IP4&#125;</span>:<span class="variable">$&#123;PORT4&#125;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="step4：nginx-conf中的server中添加-location"><a href="#step4：nginx-conf中的server中添加-location" class="headerlink" title="step4：nginx.conf中的server中添加 location"></a>step4：nginx.conf中的server中添加 location</h5><p>在server中listen 为对外暴露的nginx端口。</p>
<p>location中的proxy_pass 指向step3中添加的upstream</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /minio &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://servername;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="step5：最终效果如下"><a href="#step5：最终效果如下" class="headerlink" title="step5：最终效果如下"></a>step5：最终效果如下</h5><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#user  nobody;</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line">    <span class="attribute">upstream</span> servername &#123;</span><br><span class="line">        <span class="comment">#1、轮询（默认选项，所有weight=1）</span></span><br><span class="line">        <span class="comment">#2、weight，执行轮询几率，weight与访问几率成正比</span></span><br><span class="line">        <span class="comment">#3、ip_hash，每个请求按照hash结果分配，这样其实是每个服务都有一个固定的值</span></span><br><span class="line">        <span class="comment">#4、least_conn，最少连接数负载均衡</span></span><br><span class="line">        <span class="attribute">server</span> <span class="variable">$&#123;IP1&#125;</span>:<span class="variable">$&#123;PORT1&#125;</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="variable">$&#123;IP2&#125;</span>:<span class="variable">$&#123;PORT2&#125;</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="variable">$&#123;IP3&#125;</span>:<span class="variable">$&#123;PORT3&#125;</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="variable">$&#123;IP4&#125;</span>:<span class="variable">$&#123;PORT4&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#include /usr/local/nginx/minio.conf    </span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8089</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="attribute">location</span> /minio &#123;</span><br><span class="line">			<span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://servername;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>nginx</category>
        <category>负载均衡</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>AOP实战-AspectJ</title>
    <url>/2020/05/27/AOP%E5%AE%9E%E6%88%98-AspectJ/</url>
    <content><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><blockquote>
<p>用过Spring的都知道DI和AOP，今天介绍一个实现AOP超级且方便功能强大的框架AspectJ。此文默认读者有一定spring基础。</p>
</blockquote>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><blockquote>
<p>JDK：1.8</p>
<p>架构：SpringBoot</p>
</blockquote>
<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><h4 id="1）基础概念"><a href="#1）基础概念" class="headerlink" title="1）基础概念"></a>1）基础概念</h4><p>Aspect：切面</p>
<p>Pointcut：切点，通过不同切入点，执行不同操作，此文中展示execution时机执行的操作。</p>
<p>Advice：通知，包括前置通知、后置通知、异常通知、环绕通知等等；其中，环绕通知功能最为强大。此文展示环绕通知用法。</p>
<h4 id="2）AspectJ依赖："><a href="#2）AspectJ依赖：" class="headerlink" title="2）AspectJ依赖："></a>2）AspectJ依赖：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3）代码实现"><a href="#3）代码实现" class="headerlink" title="3）代码实现"></a>3）代码实现</h4><p>step1：首先在SpringBoot配置类中添加注解@EnableAspectJAutoProxy，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>step2：新建AspectjAop class，使用@Aspect标记为切面，注册到Spring容器中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectjAop</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>step3：新建方法controllerPointCut，添加Pointcut，切点时机为“execution”，匹配方法为controller报下所有public 方法。可以对请求进行信息安全过滤等等操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectjAop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此路径表示controller下所有类中的public方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com..controller..*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">controllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>step4：添加Advice，注入执行中切点实例ProceedingJoinPoint，ProceedingJoinPoint可以获取入参，控制执行等等操作。可以在执行方法前后进行方法增强，实现业务等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectjAop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此路径表示controller下所有类中的public方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(public * com..controller..*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">controllerPointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"controllerPointCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">aroundAdvice</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Pre-operation</span></span><br><span class="line">        log.info(<span class="string">"You can check the parameters."</span>);</span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            log.error(<span class="string">"controller throwable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// TODO：Post-operation</span></span><br><span class="line">        log.info(<span class="string">"You can encapsulate the return value."</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><blockquote>
<p>AOP的原理其实就是设计模式中的动态代理。后续会更新关于动态代理相关的blog。</p>
</blockquote>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>AOP</category>
        <category>AspectJ</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>AOP</tag>
        <tag>AspectJ</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁-Redis篇</title>
    <url>/2020/05/27/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81-Redis%E7%AF%87/</url>
    <content><![CDATA[<p>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望指出。</p>
<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>在分布式项系统的大背景下，CAP中分区容错性是必不可少的。多节点的协调尤为重要，单体服务中的锁在分布式系统中已无效，需要另辟蹊径。此文介绍比较常见的一种基于Redis实现的分布式锁。ZooKeeper的分布式锁后续Blog更新中介绍。</p>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><blockquote>
<p>JDK：1.8</p>
<p>IDE：IDEA</p>
<p>Redis：Redis server v=5.0.5 bits=64 （redis配置此处不做赘述）</p>
</blockquote>
<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><p>Redis能实现分布式锁是因为存在一个命令：setnx ,而ex属性保证了一些容错。</p>
<h4 id="1-使用LUA脚本"><a href="#1-使用LUA脚本" class="headerlink" title="1.使用LUA脚本"></a>1.使用LUA脚本</h4><h5 id="1）maven依赖"><a href="#1）maven依赖" class="headerlink" title="1）maven依赖:"></a>1）maven依赖:</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2）实现代码如下"><a href="#2）实现代码如下" class="headerlink" title="2）实现代码如下:"></a>2）实现代码如下:</h5><blockquote>
<p>注：调用时value结果业务设定，过期时间也可以当参数传入。当业务的花费时间波动比较大，需要添加守护线程进行续命，确保业务不会因为锁的过期时间太短出现问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributedLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间10min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.expireTime:600000&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> EXPIRE_TIMEOUT = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   redis key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value redis value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否上锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(<span class="keyword">final</span> String key, <span class="keyword">final</span> String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Strings.isBlank(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String script = <span class="string">"if redis.call('setNx',KEYS[1],ARGV[1]) then if redis.call('get',KEYS[1])==ARGV[1] then return redis.call('expire',KEYS[1],ARGV[2]) else return 0 end end"</span>;</span><br><span class="line">            RedisScript&lt;String&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            Object result = redisTemplate.execute(redisScript, Collections.singletonList(key), value, String.valueOf(EXPIRE_TIMEOUT));</span><br><span class="line">            <span class="keyword">if</span> (SUCCESS.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis lock failed"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key redis key </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value redis value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否解锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        RedisScript&lt;String&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Object result = redisTemplate.execute(redisScript, Collections.singletonList(key), value);</span><br><span class="line">        <span class="keyword">if</span> (SUCCESS.equals(result)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-现有框架redisson"><a href="#2-现有框架redisson" class="headerlink" title="2.现有框架redisson"></a>2.现有框架redisson</h3><h5 id="1）maven依赖-1"><a href="#1）maven依赖-1" class="headerlink" title="1）maven依赖"></a>1）maven依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2）代码实现如下："><a href="#2）代码实现如下：" class="headerlink" title="2）代码实现如下："></a>2）代码实现如下：</h5><p>1）根据官方javadoc说明，使用redisson实现分布式锁的例子如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock only if it is free at the time of invocation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Acquires the lock if it is available and returns immediately</span></span><br><span class="line"><span class="comment">     * with the value &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">     * If the lock is not available then this method will return</span></span><br><span class="line"><span class="comment">     * immediately with the value &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;A typical usage idiom for this method would be:</span></span><br><span class="line"><span class="comment">     *  &lt;pre&gt; &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * Lock lock = ...;</span></span><br><span class="line"><span class="comment">     * if (lock.tryLock()) &#123;</span></span><br><span class="line"><span class="comment">     *   try &#123;</span></span><br><span class="line"><span class="comment">     *     // manipulate protected state</span></span><br><span class="line"><span class="comment">     *   &#125; finally &#123;</span></span><br><span class="line"><span class="comment">     *     lock.unlock();</span></span><br><span class="line"><span class="comment">     *   &#125;</span></span><br><span class="line"><span class="comment">     * &#125; else &#123;</span></span><br><span class="line"><span class="comment">     *   // perform alternative actions</span></span><br><span class="line"><span class="comment">     * &#125;&#125;&lt;/pre&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * This usage ensures that the lock is unlocked if it was acquired, and</span></span><br><span class="line"><span class="comment">     * doesn't try to unlock if the lock was not acquired.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the lock was acquired and</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>2）此处提供基础的使用示例，redisson包含的很多类型的锁，包括公平锁，锁组，读写锁等，此处不逐一介绍。不难发现，redisson的锁和java提供的显式锁用法一致。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSonDistributedLock</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Redisson redisson;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过期时间10min</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;redis.expireTime:600000&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> EXPIRE_TIMEOUT = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redissonDistributedLockDemo</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        RLock lock = redisson.getLock(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isLock = lock.tryLock(EXPIRE_TIMEOUT, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">                <span class="comment">// <span class="doctag">TODO:</span> 业务操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">"tryLock failed."</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>此次介绍的分布式锁，只是一个简单的展示，具体的使用，需要根据业务处理。</p>
<p>比如Lua实现的分布式锁，当业务处理所需时间波动比较大时，预设的过期时间不好制定时，需要添加守护线程进行续命；同时也可以添加重试机制，确保加锁时不会因为其他非锁占用因素导致加锁失败。</p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>Redis</category>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>分布式</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBootBuild</title>
    <url>/2020/05/27/SpringBootBuild/</url>
    <content><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>在微服务的大背景下，快速开发尤为重要。SpringBoot是微服务基础，此文讲述搭建SpringBoot方式。</p>
<h3 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h3><p>JDK1.8、IDEA</p>
<h3 id="三、详解"><a href="#三、详解" class="headerlink" title="三、详解"></a>三、详解</h3><h4 id="1-非涉密网络环境"><a href="#1-非涉密网络环境" class="headerlink" title="1.非涉密网络环境"></a>1.非涉密网络环境</h4><p>这里的非涉密网络环境的特点是能访问<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a>。此网址是spring官方提供的快速搭建SpringBoot项目的工具。包括IDEA中创建SpringBoot项目也是通过此工具实现。本文使用IDEA创建。</p>
<h4 id="1）新建项目"><a href="#1）新建项目" class="headerlink" title="1）新建项目"></a>1）新建项目</h4><p>IDEA-&gt;File-&gt;New-&gt;Project…</p>
<img style="margin:auto 0;" src="/2020/05/27/SpringBootBuild/SpringBootBuild-1.png" alt="SpringBootBuild-1.png">

<h4 id="2）选择Spring-Initializr"><a href="#2）选择Spring-Initializr" class="headerlink" title="2）选择Spring Initializr"></a>2）选择Spring Initializr</h4><p>此处配置自己的JDK版本，使用默认的Initializr Service URL</p>
<img style="margin:auto 0;" src="/2020/05/27/SpringBootBuild/SpringBootBuild-2.png" alt="SpringBootBuild-2.png">

<h4 id="3）配置maven信息，根据项目信息填写"><a href="#3）配置maven信息，根据项目信息填写" class="headerlink" title="3）配置maven信息，根据项目信息填写"></a>3）配置maven信息，根据项目信息填写</h4><img style="margin:auto 0;" src="/2020/05/27/SpringBootBuild/SpringBootBuild-3.png" alt="SpringBootBuild-3.png">

<h4 id="4）添加项目所需依赖starter-gt-Next"><a href="#4）添加项目所需依赖starter-gt-Next" class="headerlink" title="4）添加项目所需依赖starter-&gt;Next"></a>4）添加项目所需依赖starter-&gt;Next</h4><p>注意一下，这里可以只选择starter-web，数据库的starter需要添加数据库连接配置，否则启动失败。</p>
<img style="margin:auto 0;" src="/2020/05/27/SpringBootBuild/SpringBootBuild-4.png" alt="SpringBootBuild-4.png">

<h4 id="2-涉密网络环境"><a href="#2-涉密网络环境" class="headerlink" title="2.涉密网络环境"></a>2.涉密网络环境</h4><p>此处涉密网络环境指不能访问<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a>。</p>
<h4 id="1）新建maven项目"><a href="#1）新建maven项目" class="headerlink" title="1）新建maven项目"></a>1）新建maven项目</h4><img style="margin:auto 0;" src="/2020/05/27/SpringBootBuild/SpringBootBuild-5.png" alt="SpringBootBuild-5.png">

<h4 id="3）添加父项目"><a href="#3）添加父项目" class="headerlink" title="3）添加父项目"></a>3）添加父项目</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4）添加maven依赖，包含ssm框架starter"><a href="#4）添加maven依赖，包含ssm框架starter" class="headerlink" title="4）添加maven依赖，包含ssm框架starter"></a>4）添加maven依赖，包含ssm框架starter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="5）添加打包插件"><a href="#5）添加打包插件" class="headerlink" title="5）添加打包插件"></a>5）添加打包插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 编译 src/main/java 目录下的 mapper 文件 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="6）添加启动类"><a href="#6）添加启动类" class="headerlink" title="6）添加启动类"></a>6）添加启动类</h4><p>在java目录下添加java类，添加springboot主入口方法，示例路径：com.windh.maven.springboot.Application.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="7）添加springboot入口类注解"><a href="#7）添加springboot入口类注解" class="headerlink" title="7）添加springboot入口类注解"></a>7）添加springboot入口类注解</h4><p>在Application.java类上添加@SpringBootApplication注解。如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>SpringBoot主要的特点是项目构建快。几乎可以做到零配置就可以启动一个web项目。从开始构建到启动项目，1~2分钟就可以完成。</p>
]]></content>
      <categories>
        <category>JAVA</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot搭建MyBatis</title>
    <url>/2020/05/28/SpringBoot%E6%90%AD%E5%BB%BAMyBatis/</url>
    <content><![CDATA[<blockquote>
<p><strong>本blog的出现是为了能够分享个人所学的相关知识，检验自身学习成果。内容会和其他技术存在部分关联，如有任何描述错误或者说明有误的地方，还望指出。</strong></p>
</blockquote>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>SpringBoot中使用Mybatis之前，先搭建基本的<a href="/2020/05/27/SpringBootBuild/" title="SpringBoot">SpringBoot</a>项目,然后引入<a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener"><a href="https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter" target="_blank" rel="noopener">mybatis-spring-boot-starter</a></a>和数据库驱动（本文使用MySql）的依赖。也可以添加druid的依赖。</p>
<h2 id="二、环境及依赖"><a href="#二、环境及依赖" class="headerlink" title="二、环境及依赖"></a>二、环境及依赖</h2><p>1）JDK：1.8<br>2）IDE：IDEA<br>3）maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="三、实践"><a href="#三、实践" class="headerlink" title="三、实践"></a>三、实践</h2><h4 id="1-新建表，此处自己随意新建一个表。只需要几个字段即可。随便插入两条数据。"><a href="#1-新建表，此处自己随意新建一个表。只需要几个字段即可。随便插入两条数据。" class="headerlink" title="1. 新建表，此处自己随意新建一个表。只需要几个字段即可。随便插入两条数据。"></a>1. 新建表，此处自己随意新建一个表。只需要几个字段即可。随便插入两条数据。</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">300</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">300</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">300</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mybatis`</span>.<span class="string">`t_user`</span>(<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="string">'a3fa40d2-978d-4945-b506-077762e99c24'</span>, <span class="string">'user1'</span>, <span class="string">'68a45fe6-abd0-4b17-8809-2ba3026e9718'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`mybatis`</span>.<span class="string">`t_user`</span>(<span class="string">`id`</span>, <span class="string">`username`</span>, <span class="string">`password`</span>) <span class="keyword">VALUES</span> (<span class="string">'ad2b8b5c-5b5b-4247-aadf-80032b4e570f'</span>, <span class="string">'user2'</span>, <span class="string">'ba511205-e163-4194-9ffe-3e42465c1790'</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-新建Model"><a href="#2-新建Model" class="headerlink" title="2. 新建Model"></a>2. 新建Model</h4><blockquote>
<p>项目里添加了lombok的依赖，可以免去getter/setter、构造函数等。用起来比较方便，有兴趣的可以去了解一下。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Controller，对外暴露的接口"><a href="#3-Controller，对外暴露的接口" class="headerlink" title="3. Controller，对外暴露的接口"></a>3. Controller，对外暴露的接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.windh.mybatis.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.model.UserModel;</span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">// 这里注意一下，@RestController可以写入一个值，但这个值不是用来定义RequestMapping的value的，而是定义controller在spring容器里的名字</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userServiceImpl;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserModel <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        UserModel userModel = userServiceImpl.queryUserById(id);</span><br><span class="line">        log.info(<span class="string">"query user info is :&#123;&#125;"</span>, userModel);</span><br><span class="line">        <span class="keyword">return</span> userModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-Service"><a href="#4-Service" class="headerlink" title="4. Service"></a>4. Service</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.model.UserModel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserModel <span class="title">queryUserById</span><span class="params">(String id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// impl</span></span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.mapper.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.model.UserModel;</span><br><span class="line"><span class="keyword">import</span> com.windh.mybatis.service.IUserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>(value = <span class="string">"userServiceImpl"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserModel <span class="title">queryUserById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5-Dao-Mybatis接口"><a href="#5-Dao-Mybatis接口" class="headerlink" title="5. Dao-Mybatis接口"></a>5. Dao-Mybatis接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.windh.mybatis.model.UserModel;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">UserModel <span class="title">queryUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> String id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="6）Dao-MybatisXml"><a href="#6）Dao-MybatisXml" class="headerlink" title="6）Dao-MybatisXml"></a>6）Dao-MybatisXml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.windh.mybatis.mapper.user.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span> = <span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.windh.mybatis.model.UserModel"</span>&gt;</span></span><br><span class="line">        select * from  mybatis.t_user where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="7-Dao-Mybatis接口扫描路径"><a href="#7-Dao-Mybatis接口扫描路径" class="headerlink" title="7. Dao-Mybatis接口扫描路径"></a>7. Dao-Mybatis接口扫描路径</h4><blockquote>
<p>在SpringBoot入口类添加注解，指定接口包。此处mapperscan的路径越精细越好，对于注入一个接口的多个实现时可以过滤掉非dao层的接口。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.windh.mybatis.mapper"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="8-Dao-MybatisXml扫描路径"><a href="#8-Dao-MybatisXml扫描路径" class="headerlink" title="8. Dao-MybatisXml扫描路径"></a>8. Dao-MybatisXml扫描路径</h4><blockquote>
<p>其实xml扫描是有很多细节需要注意的。根据项目情况定义扫描路径，分一下两种情况。</p>
</blockquote>
<h5 id="1-xml文件放在resources内"><a href="#1-xml文件放在resources内" class="headerlink" title="(1)xml文件放在resources内."></a>(1)xml文件放在resources内.</h5><blockquote>
<p>本文就是用这种方式的。将xml文件放在resources/mapper中。yaml文件中添加mapper-locations配置，指定xml路径。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>

<h5 id="2-xml文件放在和“Dao-Mybatis接口”放在同一目录下"><a href="#2-xml文件放在和“Dao-Mybatis接口”放在同一目录下" class="headerlink" title="(2)xml文件放在和“Dao-Mybatis接口”放在同一目录下"></a>(2)xml文件放在和“Dao-Mybatis接口”放在同一目录下</h5><blockquote>
<p>此时，我们不需要配置mapper-locations了。但是SpringBoot会无法扫描java目录下的xml文件，需要在pom文件中添加如下build.resources配置。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 编译 src/main/java 目录下的 mapper 文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="9-入口类"><a href="#9-入口类" class="headerlink" title="9. 入口类"></a>9. 入口类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.windh.mybatis.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MybatisApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="10-yaml文件"><a href="#10-yaml文件" class="headerlink" title="10. yaml文件"></a>10. yaml文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">&#123;username&#125;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&#123;password&#125;</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://&#123;ip&#125;:&#123;port&#125;/&#123;dbName&#125;?useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>

<h4 id="11-验证"><a href="#11-验证" class="headerlink" title="11. 验证"></a>11. 验证</h4><blockquote>
<p>访问 <a href="http://localhost:8080/user/a3fa40d2-978d-4945-b506-077762e99c24" target="_blank" rel="noopener">http://localhost:8080/user/a3fa40d2-978d-4945-b506-077762e99c24</a> 验证</p>
</blockquote>
<img style="margin:auto 0;" src="/2020/05/28/SpringBoot%E6%90%AD%E5%BB%BAMyBatis/SpringBoot中搭建MyBatis-1.png" alt="SpringBoot中搭建MyBatis-1.png">

<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><blockquote>
<p>Mybatis在SSM框架总是必须掌握的。很多配置需要重点关注。关于pom中引入了druid，此处提供相关文章链接，可以简单了解。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Mybatis</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringBoot</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
</search>
